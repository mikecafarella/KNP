# Sample usages of common functions

# GDP calculation eample
def growth_rate(df, name, gdp, time):
    df.sort_values(by=[time], ascending=False, inplace=True)
    df.reset_index(drop=True, inplace=True)
    df[name] = df[gdp]
    for i in range(len(df)-1):
        df.loc[i, name] = (
            (float(df.loc[i, gdp]) - float(df.loc[i+1, gdp])) / float(df.loc[i+1, gdp]))
    df.loc[len(df)-1, name] = float('NaN')
    return df

def gdp_growth_perPresidentialTerm(df, name, president, end_time, start_time):
    df = df[[president, end_time, start_time]]
    df[end_time] = df[end_time].apply(transform)
    df[start_time] = df[start_time].apply(transform)
    
    df[name] = 0
    for index, row in df.iterrows():
        df.loc[index, name] = r.df[(r.df['GDP_point_in_time_P2131_P585'] >= row[start_time]) & (
            r.df['GDP_point_in_time_P2131_P585'] <= row[end_time])]['growth_rate'].sum()
    return df

def transform(time):
    return time[0:4]
r = createRelation("Q30")
r.extend("P2131", 'forward', "GDP", rowVerbose=True, colVerbose=True)
r.query()
r.extendWithFunction(
    ['GDP_P2131', 'GDP_point_in_time_P2131_P585'], growth_rate, 'growth_rate')
r.df['GDP_point_in_time_P2131_P585'] = r.df['GDP_point_in_time_P2131_P585'].apply(
    transform)
r3 = createRelation('Q30')
r3.extend('P6', 'forward', 'President',
          rowVerbose=True, colVerbose=True, label=True)
r3.query()
r3.extendWithFunction(['President_P6Label',
                       'President_end_time_P6_P582', 'President_start_time_P6_P580'], gdp_growth_perPresidentialTerm, "gdp_growth_per_term")
pd.set_option("display.max_rows", None, "display.max_columns", None)
r3.df
